<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://adinasarapu.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://adinasarapu.github.io/" rel="alternate" type="text/html" /><updated>2021-02-02T10:21:47-05:00</updated><id>https://adinasarapu.github.io/feed.xml</id><title type="html">Ashok R. Dinasarapu Ph.D</title><subtitle></subtitle><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><entry><title type="html">Quantitative proteomics: label-free quantitation of proteins</title><link href="https://adinasarapu.github.io/posts/2018/04/blog-post-lfq/" rel="alternate" type="text/html" title="Quantitative proteomics: label-free quantitation of proteins" /><published>2020-04-04T00:00:00-04:00</published><updated>2020-04-04T00:00:00-04:00</updated><id>https://adinasarapu.github.io/posts/2018/04/blog-lfq</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2018/04/blog-post-lfq/">&lt;p&gt;Updated on September 21, 2020&lt;/p&gt;

&lt;p&gt;Liquid chromatography (LC) coupled with mass spectrometry (MS) has been widely used for protein expression quantification. Protein quantification by tandem-MS (MS/MS) uses integrated peak intensity from the parent-ion mass (MS1) or features from fragment-ions (MS2).&lt;/p&gt;

&lt;p&gt;MS1 methods use the iBAQ (intensity Based Absolute Quantification) algorithm and iBAQ intensity is a protein’s total non-normalised intensity(all peptides) divided by the number of measurable tryptic peptides.&lt;/p&gt;

&lt;p&gt;iBAQ: Σintensity/#theoretical peptides&lt;/p&gt;

&lt;p&gt;LFQ (label-free quantitation) intensity is a very similar to the iBAQ intensity but the protein intensities are normalized to exculde some “outliers” to best represent the ratio changes of different samples.&lt;/p&gt;

&lt;p&gt;Untargeted label-free quantitation (LFQ) of proteins, aims to determine the relative amount of proteins in two or more biological samples. Mass spectrometer generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw&lt;/code&gt; files are used for label-free quantitation of proteins. Base peak chromatograms can be inspected visually using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RawMeat&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which  is a data quality assessment tool designed for Thermo instruments.&lt;/p&gt;

&lt;p&gt;All raw files are processed together in a single run by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxQuant v1.6.15.0&lt;/code&gt; &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; with default parameters except the following&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raw data&lt;/code&gt; pane&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load all raw data files of a single run.&lt;/li&gt;
  &lt;li&gt;Select a sample file(s) and edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set experiment&lt;/code&gt; to assign a unique ID. If you don´t assign a unique ID to each biological sample, MaxQuant will put them together in the output.&lt;/li&gt;
  &lt;li&gt;Select a sample file and edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set fractions&lt;/code&gt; to assign fraction value. If you don’t have a fractionation, set 1.&lt;/li&gt;
  &lt;li&gt;Number of processors: 4 (depends on your computer)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Group-specific parameters&lt;/code&gt; pane&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Type: Standard and Multiplicity: 1&lt;/li&gt;
  &lt;li&gt;Modifications:&lt;br /&gt;
  a. Variable modifications: Oxidation(M); Acetyl (Protein N-term); Deamidation (NQ)&lt;br /&gt;
  b. Fixed modifications: Carbamidomethyl (C)&lt;/li&gt;
  &lt;li&gt;Digestion: trypsin&lt;/li&gt;
  &lt;li&gt;Instrument: Orbitrap&lt;/li&gt;
  &lt;li&gt;Label-free quantification: LFQ (LFQ min. ratio count: 2)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Global parameters&lt;/code&gt; pane&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sequences:&lt;br /&gt;
 a. Add D:\Proteomics\HUMAN.fasta (download it from UNIPROT)&lt;br /&gt;
 b. Identifier rule: Uniprot identifier&lt;br /&gt;
 c. Min. peptide length: 6&lt;br /&gt;
 d. Max. peptide mass [Da]: 6000&lt;/li&gt;
  &lt;li&gt;Protein quantification:&lt;br /&gt;
 a. Label min. ratio count: 1&lt;br /&gt;
 b. Peptides for quantification: Unique+razor&lt;br /&gt;
 c. Modifications used in protein quantification: Oxidation(M); Acetyl (Protein N-term); Deamidation (NQ)&lt;br /&gt;
 d. Discard unmodified counterpart peptides: FALSE&lt;/li&gt;
  &lt;li&gt;Tables&lt;br /&gt;
 a. Write msScans tabls: TRUE&lt;/li&gt;
  &lt;li&gt;MS/MS analyzer&lt;br /&gt;
 a. FTMS MS/MS match tolerance: 0.05 Da&lt;br /&gt;
 b. ITMS MS/MS match tolerance: 0.6 Da&lt;/li&gt;
  &lt;li&gt;Identification:&lt;br /&gt;
 a. Match between runs: TRUE (optional)&lt;br /&gt;
 b. Find dependent peptides: FALSE&lt;br /&gt;
 c. Razor protein FDR: TRUE&lt;/li&gt;
  &lt;li&gt;Label free quantification&lt;br /&gt;
 a. iBAQ: TRUE&lt;br /&gt;
 b. Separate LFQ in parameter groups: TRUE&lt;/li&gt;
  &lt;li&gt;Folder locations&lt;br /&gt;
 a. Combine folder location: D:\results (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Match between runs&lt;/em&gt;: Peptides, which are present in several samples, but not identified &lt;em&gt;via&lt;/em&gt; MS/MS in all of them, can still be identified &lt;em&gt;via&lt;/em&gt; matching between runs. Setting TRUE will boosts number of identifications.&lt;/p&gt;

&lt;p&gt;Database searches are performed using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Andromeda&lt;/code&gt; search engine (a peptide search engine based on probabilistic scoring) with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UniProt-SwissProt&lt;/code&gt; human canonical database as a reference and a contaminants database of common laboratory contaminants. MaxQuant reports summed intensity for each protein, as well as it`s iBAQ and LFQ values.&lt;/p&gt;

&lt;p&gt;Proteins that share all identified peptides are combined into a single protein group. Peptides that match multiple protein groups (“razor” peptides) are assigned to the protein group with the most unique peptides. MaxQuant employs the MaxLFQ algorithm for label-free quantitation (LFQ). Quantification will be performed using razor and unique peptides, including those modified by acetylation (protein N-terminal), oxidation (Met) and deamidation (NQ).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTXQC&lt;/code&gt;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; is an R package used for general quality control of proteomics data, which takes MaxQuant result files.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(&quot;devtools&quot;)  
install_github(&quot;cbielow/PTXQC&quot;, build_vignettes=TRUE, dependencies=TRUE)  

library(PTXQC)  
PTXQC::createReport(&quot;path_to_txt_directory&quot;)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Open final report file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report_v1.0.5_combined.pdf&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/proteomics-qc.png&quot; alt=&quot;proteomics-qc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Further, data processing is performed using `Perseus v1.6.14.0)&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. In brief, protein group LFQ intensities are log2-transformed to reduce the effect of outliers. To overcome the obstacle of missing LFQ values, missing values are imputed before fit the models. Hierarchical clustering is performed on Z-score normalized, log2-transformed LFQ intensities. Log ratios are calculated as the difference in average log2 LFQ intensity values between experimental and control groups. Two-tailed, Student’s t test calculations are used in statistical tests. A protein is considered statistically significant if its fold change is ≥ 2 and FDR ≤ 0.01. All the identified differentially expressed proteins are used in protein network or pathway analysis. In addition to the above analytical considerations, good experimental design helps effectively identify true differences in the presence of variability from various sources and also avoids bias during data acquisition.&lt;/p&gt;

&lt;p&gt;Further reading…&lt;br /&gt;
&lt;a href=&quot;https://pharmazie.uni-greifswald.de/storages/uni-greifswald/fakultaet/mnf/pharma/biotechno/dokumente/MaxQuant_Infos_and_Tutorial_07.pdf&quot;&gt;MaxQuant – Information and Tutorial&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bitbucket.org/adinasarapu/aws_maxquant_persues/src&quot;&gt;How to use Cloud for Proteomics Data Analysis&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://proteomicsresource.washington.edu/protocols06/&quot;&gt;RawMeat&lt;/a&gt; is a nice Thermo raw file diagnostic tool developed by the now defunct Vast Scientific &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.coxdocs.org/doku.php?id=maxquant:start&quot;&gt;MaxQuant&lt;/a&gt; is a quantitative proteomics software package designed for analyzing large mass-spectrometric data sets &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/cbielow/PTXQC&quot;&gt;PTXQC&lt;/a&gt;, an R-based quality control pipeline called Proteomics Quality Control &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.coxdocs.org/doku.php?id=perseus:start&quot;&gt;Perseus&lt;/a&gt; is software package for shotgun proteomics data analyses &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="Proteomics" /><category term="LFQ" /><category term="label free quantitation" /><category term="iBAC" /><category term="MaxQuant" /><category term="Perseus" /><category term="Amazon Web Services" /><category term="Emory University" /><category term="Bioinformatics" /><summary type="html">Updated on September 21, 2020</summary></entry><entry><title type="html">Quantitative proteomics: TMT-based quantitation of proteins</title><link href="https://adinasarapu.github.io/posts/2020/01/blog-post-tmt/" rel="alternate" type="text/html" title="Quantitative proteomics: TMT-based quantitation of proteins" /><published>2020-04-04T00:00:00-04:00</published><updated>2020-04-04T00:00:00-04:00</updated><id>https://adinasarapu.github.io/posts/2020/01/blog-tmt</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2020/01/blog-post-tmt/">&lt;p&gt;Quantification of proteins using isobaric labeling (tandem mass tag or TMT) starts with the reduction of disulfide bonds in proteins with Dithiothreitol (DTT).&lt;/p&gt;

&lt;p&gt;Alkylation with iodoacetamide (IAA) after cystine reduction results in the covalent addition of a carbamidomethyl group that prevents the formation of disulfide bonds. Then, overnight digestion of the proteins using trypsin or trypsin/LyC mixture, Tandem Mass Tag (TMT) labeling on Lysine residues, pooling of all samples and the fractionation of peptide mixture. Finally, LC-MS/MS data acquisition and database search for protein identification and quantification.&lt;/p&gt;

&lt;p&gt;Fractionation prior to LC-MS/MS analysis effectively detects low abundance proteins (&amp;lt;100ng/mL), which is the concentration range of most clinical biomarkers.&lt;/p&gt;

&lt;p&gt;TMT-based approach allows multiplexing of samples. TMT 6-plex reagents produces a series of different reporter ions with nominal masses from 126 to 131 Da at 1 Da intervals. Several TMT reagents are commercially available including TMTzero, TMT duplex, TMT 6-plex, and TMT 10-plex &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. They have the same chemical structure but contain different numbers and combinations of 13C and 15N isotopes in the reporter group. The overall calibrated intensities of reporter ions equal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isobaric labeling reagent (TMT) structure&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;a. An amine-specific reactive group – an N-hydroxysuccinimide ester, which reacts with primary amines i.e unblocked N-terminals and lysine side chains.&lt;br /&gt;
b. A mass reporter group for quantification – the reporter groups are partially fragmented from the peptide during precursor fragmentation in the mass spectrometer.&lt;br /&gt;
c. A mass normalizer group to link the reactive and reporter groups – mass normalizer group ensures that the peptide complexity in the MS1 spectra does not increase with multiplexing.&lt;/p&gt;

&lt;p&gt;Unless otherwise noted, every analysis utilizes an MS3-based TMT-centric mass spectrometry method. MS2-based TMT yields the highest precision but lowest accuracy due to ratio compression, which MS3-based TMT can partly rescue &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. To 10 precursors selected for MS2/MS3 analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the correction factors used for TMT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TMT reporter ion signals need to be adjusted to account for isotopic impurities in each TMT variant.  For TMT-10plex labeling, different batches of TMT reagents have slightly different isotope impurities that need to be included for database search to correct the reporter ion ratio. The information of isotope impurity can be found in the reagent kit. However, I do not normally correct for isotopic impurities of TMT reagents, as this is typically a «1.2% shift.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database search for protein identification and quantification&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The resulting TMT-MS3 data (.raw files) are processed using MaxQuant with an integrated Andromeda search engine (v.1.6.7.0). Tandem mass spectra were searched against the Uniprot database.&lt;/p&gt;

&lt;p&gt;Download and install  &lt;a href=&quot;https://bitbucket.org/adinasarapu/aws_maxquant_persues/src/master/&quot;&gt;MaxQuant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specification of Various Parameters in MaxQuant (All the other parameters in MaxQuant are set to the default values for processing orbitrap-type data)&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Raw data&lt;/strong&gt; pane&lt;br /&gt;
Using Load, select all raw files from all batches. Update Experiment (a unique value for each of the samples) and Fraction (if available) column values using set experiment and set fractions buttons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Group-specific parameters&lt;/strong&gt; pane&lt;br /&gt;
Change Type as Reporter ion MS3 and then select “10plex TMT”. Update isobaric impurities values, if available. For Modifications, select Variable modifications as Oxidation (M), Acetyl (Protein N-term); Deamidation (NQ) and Fixed Modifications as Carbamidomethyl© and, TMT labeled N- terminus and lysine residue. Specify Trypsin/P as a cleavage enzyme using Digestion and allow up to 2 missing cleavages. Set Label-free quantification as None.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Global parameters&lt;/strong&gt; pane&lt;br /&gt;
For Sequences select a reference proteome database Uniprot FASTA file and update Max. peptide mass [Da] as 6000. For Protein quantification select Use only unmodified peptides and a list of modifications such as Oxidation (M), Acetyl (Protein N-term) and Deamidation. Select Match between runs in Identification tab.&lt;/p&gt;

&lt;p&gt;Update the following two parameters for MS/MS analyzer:&lt;br /&gt;
a. FTMS MS/MS match tolerance: 0.05 Da&lt;br /&gt;
b. ITMS MS/MS match tolerance: 0.6 Da&lt;/p&gt;

&lt;p&gt;For Folder location select tmp directory (optional).&lt;/p&gt;

&lt;p&gt;Further data processing is performed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Perseus v1.6.12.0&lt;/code&gt; &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. The search results in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProteinGroups.txt&lt;/code&gt; generated by MaxQuant are directly processed by Perseus software. MaxQuant reports the TMT-MS3 quantitative relative abundance metrics in the columns titled “Reporter intensity corrected”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further reading&lt;/strong&gt;:&lt;br /&gt;
Data normalization and analysis in multiple TMT experimental designs &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
Multiplexed Protein Quantification Using the Isobaric TMT … &lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
Isobaric matching between runs and novel PSM-level normalization in MaxQuant … &lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;AWS Windows instance for &lt;a href=&quot;https://bitbucket.org/adinasarapu/aws_maxquant_persues/src&quot;&gt;MaxQuant/Perseus&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Bąchor, R.; Waliczek, M.; Stefanowicz, P.; Szewczuk, Z. Trends in the Design of New Isobaric Labeling Reagents for Quantitative Proteomics. Molecules 2019, 24, 701. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;A. Hogrebe, L. von Stechow, D.B. Bekker-Jensen, B.T. Weinert, C.D. Kelstrup, J.V. Olsen Benchmarking common quantification strategies for large-scale phosphoproteomics Nat. Commun., 9 (2018), p. 1045. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.coxdocs.org/doku.php?id=maxquant:start&quot;&gt;MaxQuant&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.coxdocs.org/doku.php?id=perseus:start&quot;&gt;Perseus&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://pwilmart.github.io/TMT_analysis_examples/multiple_TMT_MQ.html&quot;&gt;TMT Batch Correction&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://assets.thermofisher.com/TFS-Assets/CMD/Reference-Materials/PP-TMT-Multiplexed-Protein-Quantification-HUPO2015-EN.pdf&quot;&gt;TMT analysis using Proteome Discoverer&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://doi.org/10.1101/2020.03.30.015487&quot;&gt;Isobaric matching between runs and novel PSM-level normalization&lt;/a&gt; &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="Proteomics" /><category term="TMT" /><category term="tandem mass tag" /><category term="MS3 spectra" /><category term="MaxQuant" /><category term="isobaric labeling" /><category term="Perseus" /><category term="TMT 10plex" /><category term="10plex" /><category term="Bioinformatics" /><category term="Emory University" /><summary type="html">Quantification of proteins using isobaric labeling (tandem mass tag or TMT) starts with the reduction of disulfide bonds in proteins with Dithiothreitol (DTT).</summary></entry><entry><title type="html">Spatial gene expression data analysis on Cluster (10X Genomics, Space Ranger)</title><link href="https://adinasarapu.github.io/posts/2020/03/blog-spatial-gene-expression/" rel="alternate" type="text/html" title="Spatial gene expression data analysis on Cluster (10X Genomics, Space Ranger)" /><published>2020-03-06T00:00:00-05:00</published><updated>2020-03-06T00:00:00-05:00</updated><id>https://adinasarapu.github.io/posts/2020/03/blog-spatial-expression</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2020/03/blog-spatial-gene-expression/">&lt;p&gt;Running &lt;a href=&quot;https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger&quot;&gt;spaceranger&lt;/a&gt; as cluster mode that uses Sun Grid Engine (SGE) as queuing.&lt;/p&gt;

&lt;p&gt;There are 2 steps to analyze Spatial RNA-seq data&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger mkfastq&lt;/code&gt; demultiplexes raw base call (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BCL&lt;/code&gt;) files generated by Illumina sequencers into FASTQ files.&lt;br /&gt;
&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger count&lt;/code&gt; takes FASTQ files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger mkfastq&lt;/code&gt; and performs alignment, filtering, barcode counting, and UMI counting.&lt;/p&gt;

&lt;p&gt;Running pipelines on cluster requires the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. Load Space Ranger module (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger-1.0.0&lt;/code&gt;)&lt;sup id=&quot;fnref:1:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; or, download and uncompress spaceranger at your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; directory and add PATH in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;. Update job config file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger-1.0.0/external/martian/jobmanagers/config.json&lt;/code&gt;) for threads and memory. For example&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;threads_per_job&quot;: 8,&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;memGB_per_job&quot;: 64,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;. Update template file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger-1.0.0/external/martian/jobmanagers/sge.template&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#!/bin/bash&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -pe smp __MRO_THREADS__&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;##$ -l mem_free=__MRO_MEM_GB__G&lt;/code&gt; (comment this line if your cluster do not support it!)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -q b.q&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -S /bin/bash&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -m abe&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -M &amp;lt;e-mail&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd __MRO_JOB_WORKDIR__&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source ../spaceranger-1.0.0/sourceme.bash&lt;/code&gt; (update with complete path)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For clusters whose job managers do not support memory requests, it is possible to request memory 
in the form of cores via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mempercore&lt;/code&gt; command-line option. This option scales up the number 
of threads requested via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__MRO_THREADS__&lt;/code&gt; variable according to how much memory a stage requires&lt;/em&gt;.&lt;br /&gt;
Read more at &lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/cluster-mode&quot;&gt;Cluster Mode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;. Download spatial gene expression, image file and reference genome datasets from &lt;a href=&quot;https://www.10xgenomics.com/resources/datasets/&quot;&gt;10XGenomics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;. Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sge.sh&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TR=&quot;$HOME/refdata-cellranger-mm10-3.0.0&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output files will appear in the out/ subdirectory within this pipeline output directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd $HOME/10xgenomics/out&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For pipeline output directory, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--id&lt;/code&gt; argument is used i.e Adult_Mouse_Brain.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FASTQS=&quot;$HOME/V1_Adult_Mouse_Brain_fastqs&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spaceranger count --disable-ui \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--id=Adult_Mouse_Brain \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--transcriptome=${TR} \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fastqs=${FASTQS} \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--sample=V1_Adult_Mouse_Brain \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--image=$DATA_DIR/V1_Adult_Mouse_Brain_image.tif \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--slide=V19L01-041 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--area=C1 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobmode=sge \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mempercore=8 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobinterval=5000 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--maxjobs=3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;. Execute a command in screen and, detach and reconnect&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; command to get in/out of the system while keeping the processes running.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen -S screen_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash sge.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to exit the terminal without killing the running process, simply press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+A+D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To reconnect to the screen: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen -R screen_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;. Monitor work progress through a web browser&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_log&lt;/code&gt; file present in output folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adult_Mouse_Brain&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see serving UI as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://cluster.university.edu:3600?auth=rlSdT_QLzQ9O7fxEo-INTj1nQManinD21RzTAzkDVJ8&lt;/code&gt;, then type the following from your laptop&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -NT -L 9000:cluster.university.edu:3600 user@cluster.university.edu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user@cluster.university.edu's password:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then access the UI using the following URL in your web browser
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:9000/&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger&quot;&gt;10XGenomics- Visium spatial RNA-seq&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="10XGenomics" /><category term="SPATIAL GENE EXPRESSION" /><category term="Visium Spatial Gene Expression Solution" /><category term="brightfield microscope image" /><category term="Space Ranger" /><category term="SGE Cluster" /><category term="Cluster Computing" /><summary type="html">Running spaceranger as cluster mode that uses Sun Grid Engine (SGE) as queuing.</summary></entry><entry><title type="html">ATAC-seq peak calling with MACS2</title><link href="https://adinasarapu.github.io/posts/2019/12/blog-post-atacseq/" rel="alternate" type="text/html" title="ATAC-seq peak calling with MACS2" /><published>2019-12-05T00:00:00-05:00</published><updated>2019-12-05T00:00:00-05:00</updated><id>https://adinasarapu.github.io/posts/2019/12/blog-atacseq</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2019/12/blog-post-atacseq/">&lt;p&gt;ATAC-seq (Assay for Transposase Accessible Chromatin with high-throughput Sequencing) is a next-generation sequencing approach for the analysis of open chromatin regions to assess the genome-wise chromatin accessibility.&lt;/p&gt;

&lt;p&gt;ATAC-seq achieves this by simultaneously fragmenting and tagging genomic DNA with sequencing adapters using the hyperactive Tn5 transposase enzyme &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Other global chromatin accessibility methods include FAIRE-seq and DNase-seq. This document aims to provide accessibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pre-processing of raw sequencing reads&lt;/strong&gt; – before mapping the raw reads to the genome, trim the adapter sequences. Poor read quality or sequencing
errors often lead to low mapping rate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mapping/alignment of sequencing reads to a reference genome&lt;/strong&gt; – use Burrows-Wheeler Aligner (BWA) for mapping of sequencing reads. The output alignment file will be saved as a sequence alignment/map (SAM) format or binary version of SAM called BAM. Mark the duplicate reads using Picard &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and exclude reads mapping to mitochondrial DNA and other chromosomes from analysis together with low quality reads (MAPQ&amp;lt;10 and reads in Encode black list regions) using SAMtools &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filtering and shifting of the mapped reads&lt;/strong&gt; - shift the read position +4 and -5 bp in the BAM file before peak calling &lt;a href=&quot;https://yiweiniu.github.io/blog/2019/03/ATAC-seq-data-analysis-from-FASTQ-to-peaks/&quot;&gt;adjust the reads alignment&lt;/a&gt;. When the Tn5 transposase cuts open chromatin regions, it introduces two cuts that are separated by 9 bp. Therefore, ATAC-seq reads aligning to the positive and negative strands need to be adjusted by +4 bp and -5 bp respectively to represent the center of the transposase binding site. Picard CollectInsertSizeMetrics will be used to compute the fragment sizes on alignment shifted BAM files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identification and visualization of the ATAC-seq peaks&lt;/strong&gt; – use MACS2 for peak calling with the parameters nomodel or BAMPE &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and identify the differentially enriched peaks using the MACS2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bdgdiff&lt;/code&gt; module. Individual peaks separated by &amp;lt;100 bp will be join together. For peak annotation and functional analysis use the R package ChIPpeakAnno or HOMER &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;,&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. First, ATAC-seq peaks will be categorized into different groups based on the nearest RefSeq gene i.e. promoter, untranslated regions (UTRs), intron and exon. Second, peaks that are within 5 kb upstream and 3 kb downstream of the Transcription Start Site (TSS) are associated to the nearest genes. Finally, these genes are then analyzed for over-represented gene ontology (GO) terms and KEGG pathways using ChIPpeakAnno. Visualize all sequencing tracks using the Integrated Genomic Viewer (IGV) &lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Scripts are available for HPC &lt;a href=&quot;https://bitbucket.org/adinasarapu/atac_seq-data-analysis/src/master/&quot;&gt;Cluster&lt;/a&gt;.&lt;br /&gt;
For further reading: &lt;a href=&quot;https://yiweiniu.github.io/blog/2019/03/ATAC-seq-data-analysis-from-FASTQ-to-peaks/&quot;&gt;ATAC-seq-data-analysis-from-FASTQ-to-peaks&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/24097267&quot;&gt;ATAC-seq&lt;/a&gt; - Nature Methods. 2013; 10:1213–1218. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://broadinstitute.github.io/picard/&quot;&gt;PICARD&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.htslib.org&quot;&gt;HTSLIB&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/taoliu/MACS&quot;&gt;MACS&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-11-237&quot;&gt;ChIPpeakAnno&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://homer.ucsd.edu/homer/ngs/&quot;&gt;HOMER&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://software.broadinstitute.org/software/igv/home&quot;&gt;IGV&lt;/a&gt; &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="ATAC-seq (Assay for Transposase Accessible Chromatin with high-throughput Sequencing)" /><category term="MACS2" /><category term="BWA" /><category term="HOMER" /><summary type="html">ATAC-seq (Assay for Transposase Accessible Chromatin with high-throughput Sequencing) is a next-generation sequencing approach for the analysis of open chromatin regions to assess the genome-wise chromatin accessibility.</summary></entry><entry><title type="html">Single cell gene expression data analysis on Cluster (10X Genomics, Cell Ranger)</title><link href="https://adinasarapu.github.io/posts/2019/01/blog-post-sc-ranseq/" rel="alternate" type="text/html" title="Single cell gene expression data analysis on Cluster (10X Genomics, Cell Ranger)" /><published>2019-11-18T00:00:00-05:00</published><updated>2019-11-18T00:00:00-05:00</updated><id>https://adinasarapu.github.io/posts/2019/01/blog-sc-rnaseq</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2019/01/blog-post-sc-ranseq/">&lt;p&gt;&lt;em&gt;Updated on August 30, 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger&quot;&gt;cellranger&lt;/a&gt; as cluster mode that uses Sun Grid Engine (SGE) as queuing system allows highly parallelizable jobs.&lt;/p&gt;

&lt;p&gt;There are 4 steps to analyze Chromium Single Cell data&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger mkfastq&lt;/code&gt; demultiplexes raw base call (BCL) files generated by Illumina sequencers into FASTQ files.&lt;br /&gt;
&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger count&lt;/code&gt; takes FASTQ files from cellranger mkfastq and performs alignment, filtering, barcode counting, and UMI counting. When doing large studies involving multiple GEM wells, run cellranger count on FASTQ data from each of the GEM wells individually, and then pool the results using cellranger aggr, as described &lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/aggregate&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
&lt;strong&gt;Step 3&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger aggr&lt;/code&gt; aggregates outputs from multiple runs of cellranger count.&lt;br /&gt;
&lt;strong&gt;Step 4&lt;/strong&gt;: Downstream/Secondary analysis using R package &lt;a href=&quot;https://satijalab.org/seurat/&quot;&gt;Seurat v3.0&lt;/a&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Running pipelines on cluster requires the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. Download and uncompress &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger-4.0.0&lt;/code&gt;&lt;sup id=&quot;fnref:1:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; at your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; directory and add PATH in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;. Update job config file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger-4.0.0/martian-cs/vx.x.x/jobmanagers/config.json&lt;/code&gt;) for threads and memory. For example&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;threads_per_job&quot;: 20,&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;memGB_per_job&quot;: 150,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;. Update template file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger-4.0.0/martian-cs/vx.x.x/jobmanagers/sge.template&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#!/bin/bash&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -pe smp __MRO_THREADS__&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;##$ -l mem_free=__MRO_MEM_GB__G&lt;/code&gt; (comment this line if your cluster do not support it!)&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -q b.q&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -S /bin/bash&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -m abe&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#$ -M &amp;lt;e-mail&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd __MRO_JOB_WORKDIR__&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source $HOME/cellranger-4.0.0/sourceme.bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For clusters whose job managers do not support memory requests, it is possible to request memory 
in the form of cores via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mempercore&lt;/code&gt; command-line option. This option scales up the number 
of threads requested via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__MRO_THREADS__&lt;/code&gt; variable according to how much memory a stage requires. 
see more at &lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/cluster-mode&quot;&gt;Cluster Mode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;. Download single cell gene expression and reference genome datasets from &lt;a href=&quot;https://www.10xgenomics.com/resources/datasets/&quot;&gt;10XGenomics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;. Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sge.sh&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TR=&quot;$HOME/refdata-gex-GRCh38-2020-A&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for Single Cell 3′ Gene expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Output files will appear in the out/ subdirectory within this pipeline output directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd $HOME/10xgenomics/out&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For pipeline output directory, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--id&lt;/code&gt; argument is used i.e 10XGTX_v3.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FASTQS=&quot;$HOME/pbmc_10k_v3_fastqs&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger count --disable-ui \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--id=10XGTX_v3 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--transcriptome=${TR} \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fastqs=${FASTQS} \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--sample=pbmc_10k_v3 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--expect-cells=10000 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobmode=sge \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mempercore=8 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobinterval=5000 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--maxjobs=3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for Single Cell 5′ gene expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FASTQS=&quot;$HOME/vdj_v1_hs_nsclc_5gex_fastqs&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;use either –force-cells or –expect-cells&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger count \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--id=10XGTX_v5 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fastqs=${FASTQS} \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--transcriptome=${TR} \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--sample=vdj_v1_hs_nsclc_5gex \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force-cells=7802 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobmode=sge \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mempercore=8 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--maxjobs=3 \&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobinterval=2000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for Feature Barcode Analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tested on Single Cell 5′ gene expression and cell surface protein (Feature Barcoding/Antibody Capture Assay) data. For more information, please visit the &lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/overview/doc/getting-started-single-cell-gene-expression-with-feature-barcoding-technology&quot;&gt;Single Cell Gene Expression with Feature Barcoding&lt;/a&gt; page (Single Cell 3’) or the &lt;a href=&quot;https://support.10xgenomics.com/single-cell-vdj/overview/doc/getting-started-immune-profiling-feature-barcoding&quot;&gt;Single Cell Immune Profiling with Feature Barcoding&lt;/a&gt; page (Single Cell 5’).&lt;/p&gt;

&lt;p&gt;Currently available Feature Barcode kits for Single Cell Gene Expression Feature Barcode Technology&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;10x Solution&lt;/th&gt;
      &lt;th&gt;Gene Expression&lt;/th&gt;
      &lt;th&gt;Cell Surface Protein&lt;/th&gt;
      &lt;th&gt;CRISPR Screening&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Single Cell Gene Expression v2&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Single Cell Gene Expression v3&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Single Cell Gene Expression v3.1&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Currently available Feature Barcoding kits for Single Cell Immune Profiling Feature Barcoding Technology&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;10x Solution&lt;/th&gt;
      &lt;th&gt;TCR/Ig&lt;/th&gt;
      &lt;th&gt;Gene Expression&lt;/th&gt;
      &lt;th&gt;Cell Surface Marker&lt;/th&gt;
      &lt;th&gt;TCR-Antigen Specificity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Single Cell Immune Profiling&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Single Cell Immune Profiling with Feature Barcoding technology&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To enable Feature Barcode analysis, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger count&lt;/code&gt; needs two inputs:&lt;/p&gt;

&lt;p&gt;First you need a csv file declaring input library data sources; one for the normal single-cell gene expression reads, and one for the Feature Barcode reads (the FASTQ file directory and library type for each input dataset).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIBRARY=$HOME/vdj_v1_hs_pbmc2_5gex_protein_fastqs/vdj_v1_hs_pbmc2_5gex_protein_library.csv&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;fastqs&lt;/th&gt;
      &lt;th&gt;sample&lt;/th&gt;
      &lt;th&gt;library_type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;/path/to/antibody_fastqs&lt;/td&gt;
      &lt;td&gt;vdj_v1_hs_pbmc2_antibody&lt;/td&gt;
      &lt;td&gt;Antibody Capture&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/path/to/gene_expression_fastqs&lt;/td&gt;
      &lt;td&gt;vdj_v1_hs_pbmc2_5gex&lt;/td&gt;
      &lt;td&gt;Gene Expression&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Second, you need Feature reference csv file, declaring feature-barcode constructs and associated barcodes. The pattern will be used to extract the Feature Barcode sequence from the read sequence.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEATURE_REF=$HOME/vdj_v1_hs_pbmc2_5gex_protein_fastqs/vdj_v1_hs_pbmc2_5gex_protein_feature_ref.csv&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;read&lt;/th&gt;
      &lt;th&gt;pattern&lt;/th&gt;
      &lt;th&gt;sequence&lt;/th&gt;
      &lt;th&gt;feature_type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CD3&lt;/td&gt;
      &lt;td&gt;CD3_TotalSeqC&lt;/td&gt;
      &lt;td&gt;R2&lt;/td&gt;
      &lt;td&gt;5PNNNNNNNNNN(BC)NNNNNNNNN&lt;/td&gt;
      &lt;td&gt;CTCATTGTAACTCCT&lt;/td&gt;
      &lt;td&gt;Antibody Capture&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CD19&lt;/td&gt;
      &lt;td&gt;CD19_TotalSeqC&lt;/td&gt;
      &lt;td&gt;R2&lt;/td&gt;
      &lt;td&gt;5PNNNNNNNNNN(BC)NNNNNNNNN&lt;/td&gt;
      &lt;td&gt;CTGGGCAATTACTCG&lt;/td&gt;
      &lt;td&gt;Antibody Capture&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CD45RA&lt;/td&gt;
      &lt;td&gt;CD45RA_TotalSeqC&lt;/td&gt;
      &lt;td&gt;R2&lt;/td&gt;
      &lt;td&gt;5PNNNNNNNNNN(BC)NNNNNNNNN&lt;/td&gt;
      &lt;td&gt;TCAATCCTTCCGCTT&lt;/td&gt;
      &lt;td&gt;Antibody Capture&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Feature and Library Types&lt;/em&gt; - When inputting Feature Barcode data to Cell Ranger via the Libraries CSV File, you must declare the library_type of each library. Examples include &lt;em&gt;Antibody Capture&lt;/em&gt;, &lt;em&gt;CRISPR Guide Capture&lt;/em&gt; or &lt;em&gt;Custom&lt;/em&gt;. If your assay scheme creates a library containing multiple library_types, for example if you’re using CRISPR Guide Capture and Antibody Capture features, you will need to run Cell Ranger multiple times, passing different library_type values in the Libraries CSV File. If Targeted Gene Expression data is analyzed in conjunction with CRISPR-based Feature Barcode data, there are additional requirements imposed for the Feature Reference CSV file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.biolegend.com/en-us/totalseq&quot;&gt;TotalSeq™ Reagents for Single-Cell Proteogenomics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_feature_ref.csv&quot;&gt;TotalSeq™-B&lt;/a&gt; is a line of antibody-oligonucleotide conjugates supplied by BioLegend that are compatible with the Single Cell 3’ v3 assay.&lt;br /&gt;
&lt;a href=&quot;https://support.10xgenomics.com/csv/vdj_v1_hs_pbmc2_5gex_protein_feature_ref.csv&quot;&gt;TotalSeq™-C&lt;/a&gt; is a line of antibody-oligonucleotide conjugates supplied by BioLegend that are compatible with the Single Cell 5’ assay.&lt;br /&gt;
&lt;a href=&quot;https://support.10xgenomics.com/csv/TotalSeqA_example_feature_ref.csv&quot;&gt;TotalSeq™-A&lt;/a&gt; is a line of antibody-oligonucleotide conjugates supplied by BioLegend that are compatible with the Single Cell 3’ v2 and Single Cell 3’ v3 kits. Although TotalSeq™-A can be used with the CITE-Seq assay, CITE-Seq is not a 10x supported assay.&lt;/p&gt;

&lt;p&gt;CITE-seq (Cellular Indexing of Transcriptomes and Epitopes by Sequencing) allows simultaneous analysis of transcriptome and cell surface protein information at the level of a single cell.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The pipeline first extracts and corrects the cell barcode and UMI from the feature library using the same methods as gene expression read processing. It then matches the Feature Barcode read against the list of features declared in the above &lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref&quot;&gt;Feature Barcode Reference&lt;/a&gt;. The counts for each feature are available in the feature-barcode matrix output files.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellranger count \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--libraries=${LIBRARY} \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--feature-ref=${FEATURE_REF} \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--id=PBMC_5GEX \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--transcriptome=${TR} \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--expect-cells=9000 \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobmode=sge \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mempercore=8 \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--maxjobs=3 \&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobinterval=5000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;. Execute a command in screen and, detach and reconnect&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; command to get in/out of the system while keeping the processes running.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen -S screen_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash sge.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to exit the terminal without killing the running process, simply press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+A+D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To reconnect to the screen: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen -R screen_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;. Monitor work progress through a web browser&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_log&lt;/code&gt; file present in output folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PBMC_5GEX&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see serving UI as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://cluster.university.edu:3600?auth=rlSdT_QLzQ9O7fxEo-INTj1nQManinD21RzTAzkDVJ8&lt;/code&gt;, then type the following from your laptop&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -NT -L 9000:cluster.university.edu:3600 user@cluster.university.edu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user@cluster.university.edu's password:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then access the UI using the following URL in your web browser
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:9000/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt;. Single Cell Integration in Seurat v3.1.5&lt;/p&gt;

&lt;p&gt;Seurat is an R package designed for QC, analysis, and exploration of single cell RNA-seq data. Seurat aims to enable users to identify and interpret sources of heterogeneity from single cell transcriptomic measurements, and to integrate diverse types of single cell data. Seurat starts by reading cellranger data (barcodes.tsv.gz, features.tsv.gz and matrix.mtx.gz)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pbmc.data &amp;lt;- Read10X(data.dir = &quot;~/PBMC_5GEX/outs/filtered_feature_bc_matrix/&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://support.10xgenomics.com/single-cell-gene-expression/software/overview/welcome&quot;&gt;10XGenomics&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://satijalab.org/seurat/&quot;&gt;Seurat&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Stoeckius, M. et al. Simultaneous epitope and transcriptome measurement in single cells. Nat. Methods 14, 865–868 (2017). &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="10XGenomics" /><category term="Chromium Single Cell Gene Expression" /><category term="Single cell RNA-sequencing (scRNA-seq)" /><category term="Single Cell" /><category term="Cell Ranger" /><category term="Seurat" /><category term="Cluster Computing" /><category term="Feature Barcoding" /><summary type="html">Updated on August 30, 2020</summary></entry><entry><title type="html">Taxonomic and diversity profiling of the microbiome - 16S rRNA gene amplicon sequence data</title><link href="https://adinasarapu.github.io/posts/2019/01/blog-post-qiime2/" rel="alternate" type="text/html" title="Taxonomic and diversity profiling of the microbiome - 16S rRNA gene amplicon sequence data" /><published>2019-01-01T00:00:00-05:00</published><updated>2019-01-01T00:00:00-05:00</updated><id>https://adinasarapu.github.io/posts/2019/01/blog-qiime2</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2019/01/blog-post-qiime2/">&lt;p&gt;The 16S ribosomal RNA (rRNA) gene of Bacteria codes for the RNA component of the 30S subunit. Different bacterial species have one to multiple copies of the 16S rRNA gene, and each with 9 hypervariable regions, V1-V9. High-throughput sequencing of 16S rRNA gene (a “marker gene”) amplicons has become a widely used method to study bacterial phylogeny and species classification.&lt;/p&gt;

&lt;p&gt;Quantitative Insights Into Microbial Ecology “QIIME” 2 (release 2018.11)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a widely used package to identity abundance of microbes using 16s rRNA. Briefly, feature table containing counts of each unique sequence in the samples will be constructed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qiime dada2 denoise-paired&lt;/code&gt; method. A feature is essentially any unit of observation, e.g., an OTU (Operational Taxonomic Unit), a sequence variant, a gene or a metabolite. In QIIME2 (currently), most features will be OTUs or sequence variants (alternatively, for OTUs, use QIIME2 plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q2-vsearch&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Data produced by QIIME 2 exist as QIIME 2 artifacts. A QIIME 2 artifact typically has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.qza&lt;/code&gt; file extension when output data stored in a file. Visualizations are another type of data (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.qzv&lt;/code&gt; file extension) generated by QIIME 2, which can be viewed using a web interface &lt;a href=&quot;https://view.qiime2.org&quot;&gt;https://view.qiime2.org&lt;/a&gt; (at Firefox web browser) without requiring a QIIME installation. Since QIIME 2 works with artifacts instead of data files (e.g. FASTA files), we must create a QIIME 2 artifact by importing our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastq.gz&lt;/code&gt; data files.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Scripts are available for AWS &lt;a href=&quot;https://bitbucket.org/adinasarapu/aws_qiime2/src&quot;&gt;Cloud&lt;/a&gt; and HPC &lt;a href=&quot;https://bitbucket.org/adinasarapu/cluster_qiime2/src&quot;&gt;Cluster&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://qiime2.org&quot;&gt;https://qiime2.org&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="microbiome" /><category term="computing" /><category term="qiime2" /><category term="16s rRNA amplicon" /><category term="DADA2" /><category term="OTU" /><summary type="html">The 16S ribosomal RNA (rRNA) gene of Bacteria codes for the RNA component of the 30S subunit. Different bacterial species have one to multiple copies of the 16S rRNA gene, and each with 9 hypervariable regions, V1-V9. High-throughput sequencing of 16S rRNA gene (a “marker gene”) amplicons has become a widely used method to study bacterial phylogeny and species classification.</summary></entry><entry><title type="html">Taxonomic and functional profiling of the microbiome - whole genome shotgun metagenomics</title><link href="https://adinasarapu.github.io/posts/2018/07/blog-post-metagenomics/" rel="alternate" type="text/html" title="Taxonomic and functional profiling of the microbiome - whole genome shotgun metagenomics" /><published>2018-07-27T00:00:00-04:00</published><updated>2018-07-27T00:00:00-04:00</updated><id>https://adinasarapu.github.io/posts/2018/07/blog-metagenomics</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2018/07/blog-post-metagenomics/">&lt;p&gt;This workflow consists of taxonomic and functional profiling of shotgun metagenomics sequencing (MGS) reads using MetaPhlAn2 and HUMAnN2, respectively. To perform taxonomic (phyla, genera or species level) profiling of the MGS data, the MetaPhlAn2 pipeline was run on a high performance multicore cluster computing environment.&lt;/p&gt;

&lt;p&gt;MetaPhlAn2 provides microbial (bacterial, archaeal, viral, and eukaryotic) taxonomic profiling allowing the quantification of individual species across metagenomic samples. MetaPhlAn2 relies on ~1M unique clade-specific marker genes identified from ~17,000 reference genomes. Microbial reads, aligned by MetaPhlAn2, belonging to clades with no sequenced genomes available are reported as an “unclassified” subclade of the closest ancestor with available sequence data.
HUMAnN2 utilizes the MetaCyc database as well as the UniRef gene family catalog to characterize the microbial pathways present in samples. HUMAnN2 relies on programs such as BowTie (for accelerated nucleotide-level searches) and Diamond (for accelerated translated searches) to compute the abundance of gene families and metabolic pathways present. HUMAnN2 generates three outputs: 1) gene families based on UniRef proteins and their abundances reported in reads per kilobase, 2) MetaCyc pathways and their coverage, and 3) MetaCyc pathways and their abundances reported in reads per kilobase.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Scripts are available at &lt;a href=&quot;https://bitbucket.org/adinasarapu/shotgun_metagenomics/src&quot;&gt;shotgun_metagenomics&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="metagenomics" /><category term="MetaPhlAn2" /><category term="HUMAnN2" /><category term="taxonomic profiling" /><category term="functional profiling" /><category term="shotgun metagenomics sequencing" /><summary type="html">This workflow consists of taxonomic and functional profiling of shotgun metagenomics sequencing (MGS) reads using MetaPhlAn2 and HUMAnN2, respectively. To perform taxonomic (phyla, genera or species level) profiling of the MGS data, the MetaPhlAn2 pipeline was run on a high performance multicore cluster computing environment.</summary></entry><entry><title type="html">RNA-Seq: raw reads to differential expression</title><link href="https://adinasarapu.github.io/posts/2018/03/blog-post-rnaseq/" rel="alternate" type="text/html" title="RNA-Seq: raw reads to differential expression" /><published>2018-03-20T00:00:00-04:00</published><updated>2018-03-20T00:00:00-04:00</updated><id>https://adinasarapu.github.io/posts/2018/03/blog-rnaseq</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2018/03/blog-post-rnaseq/">&lt;p&gt;A simple RNA-Seq differential expression analysis using High Performance Computing (HPC).&lt;/p&gt;

&lt;p&gt;The goal is to analyze RNA-Seq data using HPC. The software which will be used in this session is listed below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bioinformatics.babraham.ac.uk/projects/fastqc/&quot;&gt;FastQC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;STAR&lt;/li&gt;
  &lt;li&gt;HTSeq&lt;/li&gt;
  &lt;li&gt;EdgeR&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This pipeline is available as &lt;a href=&quot;https://bitbucket.org/adinasarapu/ibs_class/src&quot;&gt;RNA-Seq Exercise&lt;/a&gt;&lt;/p&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="RNASeq" /><category term="RNA-Seq" /><category term="FastQC" /><category term="STAR" /><category term="HTSeq" /><category term="edgeR" /><summary type="html">A simple RNA-Seq differential expression analysis using High Performance Computing (HPC).</summary></entry><entry><title type="html">Genomic variants from RNA-Seq data</title><link href="https://adinasarapu.github.io/posts/2018/01/blog-post-gatk/" rel="alternate" type="text/html" title="Genomic variants from RNA-Seq data" /><published>2018-01-05T00:00:00-05:00</published><updated>2018-01-05T00:00:00-05:00</updated><id>https://adinasarapu.github.io/posts/2018/01/blog-gatk</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2018/01/blog-post-gatk/">&lt;p&gt;RNA-Seq allows the detection and quantification of known and rare RNA transcripts within a sample. In addition to differential expression and detection of novel transcripts, RNA-seq also supports the detection of genomic variation in expressed regions.&lt;/p&gt;

&lt;p&gt;Currently few workflows exist for detecting SNPs in RNA-seq data, including &lt;a href=&quot;http://bioinformaticstools.mayo.edu/research/esnv-detect/&quot;&gt;eSNV-detect&lt;/a&gt;, &lt;a href=&quot;https://github.com/rpiskol/SNPiR&quot;&gt;SNPiR&lt;/a&gt; and &lt;a href=&quot;https://github.com/pysam-developers/pysam&quot;&gt;Opossum&lt;/a&gt;. Here, I have employed &lt;a href=&quot;https://software.broadinstitute.org/gatk/documentation/article.php?id=3891&quot;&gt;GATK workflow for SNP and indel calling on RNAseq data&lt;/a&gt;, which is based on the following steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reference (hg38) based read mapping using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STAR&lt;/code&gt; aligner. This is a 2-pass approach with the suggested parameters. In this STAR 2-pass approach, splice junctions detected in a first alignment run are used to guide the final alignment (reads which have been mapped across splice junctions must be split to remove intronic parts).&lt;/li&gt;
  &lt;li&gt;Add read group information, sort, mark the duplicates and index with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picard.jar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;GATK’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SplitNCigarReads&lt;/code&gt; split the reads into exon segments (removing Ns but maintaining grouping information) and reassigning mapping qualities.&lt;/li&gt;
  &lt;li&gt;Indel realignment and recalibration of Base qualities and&lt;/li&gt;
  &lt;li&gt;Variant calling with GATK’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HaplotypeCaller&lt;/code&gt;, and finally filtering the variants with GATK’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VariantFiltration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My qsub-based pipeline is available at &lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/3e9a2b3881ea0e2afbe58df325ca693ecfac4fbc/job_rnaseq_variant_caller.sh&quot;&gt;bitbucket.org&lt;/a&gt;&lt;/p&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="GATK" /><category term="RNA-Seq" /><category term="STAR" /><category term="SNP" /><category term="Indel" /><summary type="html">RNA-Seq allows the detection and quantification of known and rare RNA transcripts within a sample. In addition to differential expression and detection of novel transcripts, RNA-seq also supports the detection of genomic variation in expressed regions.</summary></entry><entry><title type="html">eQTL analysis of RNA-Seq data</title><link href="https://adinasarapu.github.io/posts/2017/12/blog-post-eqtl/" rel="alternate" type="text/html" title="eQTL analysis of RNA-Seq data" /><published>2017-12-17T00:00:00-05:00</published><updated>2017-12-17T00:00:00-05:00</updated><id>https://adinasarapu.github.io/posts/2017/12/blog-eqtl</id><content type="html" xml:base="https://adinasarapu.github.io/posts/2017/12/blog-post-eqtl/">&lt;p&gt;Genetic locus that affects gene expression is often referred to as expression quantitative trait locus (eQTL). eQTL mapping studies assesses the association of SNPs with genome-wide expression levels.&lt;br /&gt;
Based on the hg38 reference genome, paired-end reads are mapped by &lt;a href=&quot;https://academic.oup.com/bioinformatics/article/29/1/15/272537&quot;&gt;STAR&lt;/a&gt; aligner. The mapped reads are used for expression quantification without assembling transcripts by counting the number of reads that map to an exon by &lt;a href=&quot;https://htseq.readthedocs.io/en/release_0.9.1/&quot;&gt;HTSeq&lt;/a&gt; that uses Refseq gene annotations. Then, to correct for systematic variability such as library fragment size, sequence composition bias, and read depth the raw counts are normalized as trimmed mean of M-values (TMM) through &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2796818/&quot;&gt;edgeR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beyond quantifying gene expression, the data generated by RNA-Seq facilitate the integration of expression data with genotyping data also known as expression quantitative trait loci (eQTLs) analysis. Infinium CytoSNP-850K v1.2 arrays are used to identify genetic and structural variations. 
The array data is analyzed using GenomeStudioR or BlueFuse Multi software based on the reference human genome (hg38/GRCh38). After loading the raw array data, the SNP manifest file (&lt;em&gt;.bpm), and standard cluster file (&lt;/em&gt;.egt) are imported into GenomeStudio and clustering of intensities for SNPs are performed. Genotyping calls for a specific DNA made by the calling algorithm (GenCall) which relies on information provided by the GenTrain clustering algorithm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bios.unc.edu/research/genomic_software/Matrix_eQTL/&quot;&gt;Matrix eQTL&lt;/a&gt; was used to efficiently test the associations by modeling the effect of genotype as additive linear.&lt;br /&gt;
&lt;img src=&quot;/images/DEG.png&quot; alt=&quot;eqtl_figure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Data analysis pipeline for RNA-Seq based eQTL mapping:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/6bad66b2e4ce1f98d3392cb4af7cbf37bb08f73f/job_fastqc.sh&quot;&gt;Quality control&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/6bad66b2e4ce1f98d3392cb4af7cbf37bb08f73f/job_star_mapping.sh&quot;&gt;Read mapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/a9ecd1df38811b6078c2397476dd12a48ac18a50/job_post_mapping_qc.sh&quot;&gt;Post mapping QC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/a9ecd1df38811b6078c2397476dd12a48ac18a50/job_htseq_count.sh&quot;&gt;HTSeq-count&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/a9ecd1df38811b6078c2397476dd12a48ac18a50/HTseqCountToANOVA.R&quot;&gt;Normalization, Differential expression&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/8a3ba3ef7eaa3937b04b101a843e2a5fed88e52b/ExtractMultiSampleGenotype.R&quot;&gt;Create SNP Matrix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/a1e0bf858af1619edae4816b03735aea9ab215aa/MatrixEQTL_CisTrans.R&quot;&gt;Matrix eQTL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/adinasarapu/clustercomputing/src/dd0755abdece34f8e1f8f46329f2bd570bfd0318/ManhattanPlot_GWAS.R&quot;&gt;Manhattan plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Scientist, Bioinformatics</name><email>ashok.reddy.dinasarapu@emory.edu</email></author><category term="eQTL" /><category term="RNA-Seq" /><category term="htseq" /><category term="MatrixEqtl" /><category term="edgeR" /><summary type="html">Genetic locus that affects gene expression is often referred to as expression quantitative trait locus (eQTL). eQTL mapping studies assesses the association of SNPs with genome-wide expression levels. Based on the hg38 reference genome, paired-end reads are mapped by STAR aligner. The mapped reads are used for expression quantification without assembling transcripts by counting the number of reads that map to an exon by HTSeq that uses Refseq gene annotations. Then, to correct for systematic variability such as library fragment size, sequence composition bias, and read depth the raw counts are normalized as trimmed mean of M-values (TMM) through edgeR.</summary></entry></feed>